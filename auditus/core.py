"""Audio Embeddings"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['AudioArray', 'load_audio', 'calc_ratio', 'resample', 'get_features']

# %% ../nbs/00_core.ipynb 3
import numpy as np
from fastcore.all import *
import soundfile as sf
from IPython.display import Audio
from fasttransform import Transform, Pipeline
from transformers import AutoFeatureExtractor

# %% ../nbs/00_core.ipynb 4
class AudioArray(BasicRepr): 
    def __init__(self, a: np.array, sr: int): store_attr()
    def show(self): return Audio(self, rate=self.sr)
    @property
    def shape(self): return self.a.shape
    def __len__(self): return len(self.a)
    def __getitem__(self, idx): return self.a[idx]

# %% ../nbs/00_core.ipynb 7
def load_audio(path, sr=None): 
    with sf.SoundFile(path) as f: return AudioArray(f.read(), sr if sr else f.samplerate)

# %% ../nbs/00_core.ipynb 11
def calc_ratio(audio: AudioArray, target_sr: int) -> float:
    return target_sr / audio.sr

# %% ../nbs/00_core.ipynb 15
def resample(audio: AudioArray, target_sr: int) -> AudioArray:
    if audio.sr == target_sr: return audio
    indices = np.linspace(0, len(audio.a) - 1, new_length(audio, target_sr))
    resampled = np.interp(indices, np.arange(len(audio.a)), audio.a)
    return AudioArray(resampled, target_sr)

# %% ../nbs/00_core.ipynb 18
def get_features(audio: AudioArray, model_name="MIT/ast-finetuned-audioset-10-10-0.4593"):
    return AutoFeatureExtractor.from_pretrained(model_name)(audio, sampling_rate=audio.sr, return_tensors="np")['input_values']
